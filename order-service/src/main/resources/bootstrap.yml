spring:
  application:
    name: order-service
  cloud:
    config:
      uri: ${CONFIG_SERVER:http://config-server:8888}
  sleuth:
    sampler:
      probability: 1.0

opentracing:
  jaeger:
    log-spans: false


#CREATE KEYSPACE orderkeyspace WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };
#create type address (firstName text, lastName text, address text, postalcode text, city text, province text, country text);
#create type product (product_id text, product_name text, image text, product_brand text, product_size text, product_color text, product_qte int, unit_price decimal, store text);
#create type payment_info (no_credit_card text, exp_date text, security_code int, last_name text, first_name text, payment_intent_id text, payment_type text);
#create table orders (order_id text, products list<frozen <product>>, product_name text, product_brand text, total decimal, user_email text, payment_info payment_info, user_address address, order_status text, order_time timestamp, payment_status text, payment_time timestamp, shipping_status text, shipping_time timestamp,tracking_number text, primary key ((user_email), order_time, order_id)) with clustering order by (order_time DESC, order_id DESC);

#create table orders_by_orderId (order_id text, products list<frozen <product>>, product_name text, product_brand text, total decimal, user_email text, payment_info payment_info, user_address address, order_status text, order_time timestamp, payment_status text, payment_time timestamp, shipping_status text, shipping_time timestamp, tracking_number text, primary key ((order_id), user_email, order_time)) with clustering order by (user_email ASC, order_time DESC);

#create table orders_status (bucket text, order_id text, products list<frozen <product>>, product_name text, product_brand text, total decimal, user_email text, payment_info payment_info, user_address address, order_status text, order_time timestamp, payment_status text, payment_time timestamp, shipping_status text, shipping_time timestamp, tracking_number text, creation_date timestamp, update_date timestamp, primary key ((bucket), order_time, user_email, order_id)) with clustering order by (order_time ASC, user_email ASC, order_id ASC);

#docker run --name order-service --network got-it-net -e EUREKA_SERVER=http://discovery-service:8761/eureka -e CASSANDRA_SERVER=cas1,cas2 -e RABBITMQ_SERVER=rabbitmq -e KAFKA_SERVER=kafka:9092 -e CONFIG_SERVER=http://config-server:8888 -e ZIPKIN_SERVER=http://zipkin:9411 -d sifraden/order-service:1.0.0-SNAPSHOT
